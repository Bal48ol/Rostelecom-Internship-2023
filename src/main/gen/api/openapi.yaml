openapi: 3.0.0
info:
  title: Student's Grades API
  version: 2.0.0
servers:
- description: ЛокалХост
  url: http://localhost:8080/
paths:
  /get/student/grades/{id}:
    get:
      parameters:
      - description: ID студента
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grade'
          description: Успешный запрос
        "404":
          description: Студент не найден
      summary: Получение данных студента по ID
      x-accepts: application/json
  /get/average_grades/{groupId}:
    get:
      parameters:
      - description: ID класса
        explode: false
        in: path
        name: groupId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/StudentDTO'
                type: array
          description: Успешный запрос
        "404":
          description: Ученики не найдены
      summary: Получение средних оценок каждого ученика в указанном классе
      x-accepts: application/json
  /add/student:
    post:
      parameters:
      - description: Фамилия студента
        explode: true
        in: query
        name: lastName
        required: true
        schema:
          type: string
        style: form
      - description: Имя студента
        explode: true
        in: query
        name: firstName
        required: true
        schema:
          type: string
        style: form
      - description: Возраст студента
        explode: true
        in: query
        name: age
        required: true
        schema:
          type: integer
        style: form
      - description: ID класса студента
        explode: true
        in: query
        name: groupId
        required: true
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
          description: Успешный запрос
      summary: Добавление студента
      x-accepts: application/json
  /delete/student/{id}:
    delete:
      parameters:
      - description: ID студента
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Успешный запрос
        "404":
          description: Студент не найден
      summary: Удаление студента по ID
      x-accepts: application/json
  /update/grade/{studentId}/{subject}:
    put:
      parameters:
      - description: ID студента
        explode: false
        in: path
        name: studentId
        required: true
        schema:
          type: integer
        style: simple
      - description: Предмет
        explode: false
        in: path
        name: subject
        required: true
        schema:
          type: string
        style: simple
      - description: Новая оценка
        explode: true
        in: query
        name: newGrade
        required: true
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Успешный запрос
        "400":
          description: Некорректный запрос
        "404":
          description: Студент не найден
      summary: Редактирование оценки студента по определенному предмету
      x-accepts: application/json
components:
  schemas:
    Grade:
      example:
        rus: 7
        literature: 9
        student:
          groupId: 5
          name: name
          id: 6
          family: family
          age: 1
        mathematics: 2
        physics: 5
        geometry: 3
        id: 0
        informatics: 2
      properties:
        id:
          type: integer
        student:
          $ref: '#/components/schemas/Student'
        physics:
          type: integer
        mathematics:
          type: integer
        rus:
          type: integer
        literature:
          type: integer
        geometry:
          type: integer
        informatics:
          type: integer
      type: object
    Student:
      example:
        groupId: 5
        name: name
        id: 6
        family: family
        age: 1
      properties:
        id:
          type: integer
        family:
          type: string
        name:
          type: string
        age:
          type: integer
        groupId:
          type: integer
      type: object
    StudentDTO:
      example:
        averageGrade: 1.4658129805029452
        groupId: 6
        name: name
        family: family
        age: 0
      properties:
        family:
          type: string
        name:
          type: string
        age:
          type: integer
        groupId:
          type: integer
        averageGrade:
          type: number
      type: object

