/*
 * Student's Grades API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Grade;
import org.openapitools.client.model.Student;
import org.openapitools.client.model.StudentDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addStudentPost
     * @param lastName Фамилия студента (required)
     * @param firstName Имя студента (required)
     * @param age Возраст студента (required)
     * @param groupId ID класса студента (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addStudentPostCall(String lastName, String firstName, Integer age, Integer groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/add/student";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (age != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("age", age));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addStudentPostValidateBeforeCall(String lastName, String firstName, Integer age, Integer groupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lastName' is set
        if (lastName == null) {
            throw new ApiException("Missing the required parameter 'lastName' when calling addStudentPost(Async)");
        }
        
        // verify the required parameter 'firstName' is set
        if (firstName == null) {
            throw new ApiException("Missing the required parameter 'firstName' when calling addStudentPost(Async)");
        }
        
        // verify the required parameter 'age' is set
        if (age == null) {
            throw new ApiException("Missing the required parameter 'age' when calling addStudentPost(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addStudentPost(Async)");
        }
        

        okhttp3.Call localVarCall = addStudentPostCall(lastName, firstName, age, groupId, _callback);
        return localVarCall;

    }

    /**
     * Добавление студента
     * 
     * @param lastName Фамилия студента (required)
     * @param firstName Имя студента (required)
     * @param age Возраст студента (required)
     * @param groupId ID класса студента (required)
     * @return Student
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
     </table>
     */
    public Student addStudentPost(String lastName, String firstName, Integer age, Integer groupId) throws ApiException {
        ApiResponse<Student> localVarResp = addStudentPostWithHttpInfo(lastName, firstName, age, groupId);
        return localVarResp.getData();
    }

    /**
     * Добавление студента
     * 
     * @param lastName Фамилия студента (required)
     * @param firstName Имя студента (required)
     * @param age Возраст студента (required)
     * @param groupId ID класса студента (required)
     * @return ApiResponse&lt;Student&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Student> addStudentPostWithHttpInfo(String lastName, String firstName, Integer age, Integer groupId) throws ApiException {
        okhttp3.Call localVarCall = addStudentPostValidateBeforeCall(lastName, firstName, age, groupId, null);
        Type localVarReturnType = new TypeToken<Student>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Добавление студента (asynchronously)
     * 
     * @param lastName Фамилия студента (required)
     * @param firstName Имя студента (required)
     * @param age Возраст студента (required)
     * @param groupId ID класса студента (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addStudentPostAsync(String lastName, String firstName, Integer age, Integer groupId, final ApiCallback<Student> _callback) throws ApiException {

        okhttp3.Call localVarCall = addStudentPostValidateBeforeCall(lastName, firstName, age, groupId, _callback);
        Type localVarReturnType = new TypeToken<Student>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStudentIdDelete
     * @param id ID студента (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Студент не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStudentIdDeleteCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delete/student/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStudentIdDeleteValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteStudentIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteStudentIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Удаление студента по ID
     * 
     * @param id ID студента (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Студент не найден </td><td>  -  </td></tr>
     </table>
     */
    public String deleteStudentIdDelete(Integer id) throws ApiException {
        ApiResponse<String> localVarResp = deleteStudentIdDeleteWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Удаление студента по ID
     * 
     * @param id ID студента (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Студент не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> deleteStudentIdDeleteWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteStudentIdDeleteValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Удаление студента по ID (asynchronously)
     * 
     * @param id ID студента (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Студент не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStudentIdDeleteAsync(Integer id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStudentIdDeleteValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAverageGradesGroupIdGet
     * @param groupId ID класса (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученики не найдены </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAverageGradesGroupIdGetCall(Integer groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/average_grades/{groupId}"
            .replaceAll("\\{" + "groupId" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAverageGradesGroupIdGetValidateBeforeCall(Integer groupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getAverageGradesGroupIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = getAverageGradesGroupIdGetCall(groupId, _callback);
        return localVarCall;

    }

    /**
     * Получение средних оценок каждого ученика в указанном классе
     * 
     * @param groupId ID класса (required)
     * @return List&lt;StudentDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученики не найдены </td><td>  -  </td></tr>
     </table>
     */
    public List<StudentDTO> getAverageGradesGroupIdGet(Integer groupId) throws ApiException {
        ApiResponse<List<StudentDTO>> localVarResp = getAverageGradesGroupIdGetWithHttpInfo(groupId);
        return localVarResp.getData();
    }

    /**
     * Получение средних оценок каждого ученика в указанном классе
     * 
     * @param groupId ID класса (required)
     * @return ApiResponse&lt;List&lt;StudentDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученики не найдены </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StudentDTO>> getAverageGradesGroupIdGetWithHttpInfo(Integer groupId) throws ApiException {
        okhttp3.Call localVarCall = getAverageGradesGroupIdGetValidateBeforeCall(groupId, null);
        Type localVarReturnType = new TypeToken<List<StudentDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение средних оценок каждого ученика в указанном классе (asynchronously)
     * 
     * @param groupId ID класса (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученики не найдены </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAverageGradesGroupIdGetAsync(Integer groupId, final ApiCallback<List<StudentDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAverageGradesGroupIdGetValidateBeforeCall(groupId, _callback);
        Type localVarReturnType = new TypeToken<List<StudentDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStudentGradesIdGet
     * @param id ID студента (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Студент не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStudentGradesIdGetCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/student/grades/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStudentGradesIdGetValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getStudentGradesIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = getStudentGradesIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Получение данных студента по ID
     * 
     * @param id ID студента (required)
     * @return Grade
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Студент не найден </td><td>  -  </td></tr>
     </table>
     */
    public Grade getStudentGradesIdGet(Integer id) throws ApiException {
        ApiResponse<Grade> localVarResp = getStudentGradesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Получение данных студента по ID
     * 
     * @param id ID студента (required)
     * @return ApiResponse&lt;Grade&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Студент не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Grade> getStudentGradesIdGetWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getStudentGradesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Grade>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Получение данных студента по ID (asynchronously)
     * 
     * @param id ID студента (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Студент не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStudentGradesIdGetAsync(Integer id, final ApiCallback<Grade> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStudentGradesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Grade>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGradeStudentIdSubjectPut
     * @param studentId ID студента (required)
     * @param subject Предмет (required)
     * @param newGrade Новая оценка (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Студент не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGradeStudentIdSubjectPutCall(Integer studentId, String subject, Integer newGrade, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/update/grade/{studentId}/{subject}"
            .replaceAll("\\{" + "studentId" + "\\}", localVarApiClient.escapeString(studentId.toString()))
            .replaceAll("\\{" + "subject" + "\\}", localVarApiClient.escapeString(subject.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (newGrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newGrade", newGrade));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGradeStudentIdSubjectPutValidateBeforeCall(Integer studentId, String subject, Integer newGrade, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'studentId' is set
        if (studentId == null) {
            throw new ApiException("Missing the required parameter 'studentId' when calling updateGradeStudentIdSubjectPut(Async)");
        }
        
        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling updateGradeStudentIdSubjectPut(Async)");
        }
        
        // verify the required parameter 'newGrade' is set
        if (newGrade == null) {
            throw new ApiException("Missing the required parameter 'newGrade' when calling updateGradeStudentIdSubjectPut(Async)");
        }
        

        okhttp3.Call localVarCall = updateGradeStudentIdSubjectPutCall(studentId, subject, newGrade, _callback);
        return localVarCall;

    }

    /**
     * Редактирование оценки студента по определенному предмету
     * 
     * @param studentId ID студента (required)
     * @param subject Предмет (required)
     * @param newGrade Новая оценка (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Студент не найден </td><td>  -  </td></tr>
     </table>
     */
    public String updateGradeStudentIdSubjectPut(Integer studentId, String subject, Integer newGrade) throws ApiException {
        ApiResponse<String> localVarResp = updateGradeStudentIdSubjectPutWithHttpInfo(studentId, subject, newGrade);
        return localVarResp.getData();
    }

    /**
     * Редактирование оценки студента по определенному предмету
     * 
     * @param studentId ID студента (required)
     * @param subject Предмет (required)
     * @param newGrade Новая оценка (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Студент не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> updateGradeStudentIdSubjectPutWithHttpInfo(Integer studentId, String subject, Integer newGrade) throws ApiException {
        okhttp3.Call localVarCall = updateGradeStudentIdSubjectPutValidateBeforeCall(studentId, subject, newGrade, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Редактирование оценки студента по определенному предмету (asynchronously)
     * 
     * @param studentId ID студента (required)
     * @param subject Предмет (required)
     * @param newGrade Новая оценка (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешный запрос </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Некорректный запрос </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Студент не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGradeStudentIdSubjectPutAsync(Integer studentId, String subject, Integer newGrade, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGradeStudentIdSubjectPutValidateBeforeCall(studentId, subject, newGrade, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
